worker_processes     8;    			 # one(1) worker or equal the number of _real_ cpu cores. 4=4 core cpu
user                 http http;

events {
        worker_connections  1024;   		 # number of parallel or concurrent connections per worker_processes
        accept_mutex        on;   		 # serially accept() connections and pass to workers, efficient if workers gt 1
        use	            epoll;
        multi_accept	    on;
}

http {
     ## Timeouts, do not keep connections open longer then necessary to reduce
        client_body_timeout      5s; # maximum time between packets the client can pause when sending nginx any data
        client_header_timeout    5s; # maximum time the client has to send the entire header to nginx
        keepalive_timeout       75s; # timeout which a single keep-alive client connection will stay open
        send_timeout             5s; # maximum time between packets nginx is allowed to pause when sending the client data

     ## General Options
        charset                   utf-8; # adds the line "Content-Type" into response-header, same as "source_charset"
        default_type              application/octet-stream;
        gzip                      off; # disable on the fly gzip compression due to higher latency, only use gzip_static
        gzip_http_version         1.0; # serve gzipped content to all clients including HTTP/1.0 
        gzip_static               on;  # precompress content (gzip -9) with an external script
        gzip_vary                 on;  # send response header "Vary: Accept-Encoding"
        gzip_proxied              any;  # allows compressed responses for any request even from proxies
        ignore_invalid_headers    on;
        include                   /etc/nginx/mime.types;
        keepalive_requests        50;  # number of requests per connection, does not affect SPDY
        keepalive_disable         none; # allow all browsers to use keepalive connections
        max_ranges                0;   # disabled to stop range header DoS attacks
        msie_padding              off;
        output_buffers            1 512;
        postpone_output           1440;   # postpone sends to match our machine's MSS
        read_ahead                512K;   # kernel read head set to the output_buffers
        recursive_error_pages     on;
        reset_timedout_connection on;  # reset timed out connections freeing ram
        sendfile                  on;  # on for decent direct disk I/O
        server_tokens             off; # version number in error pages
        server_name_in_redirect   off; # if off, nginx will use the requested Host header
        source_charset            utf-8; # same value as "charset"
        tcp_nodelay               on; # Nagle buffering algorithm, used for keepalive only
        tcp_nopush                on;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;
        ssl_ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5;


     ## Request limits
        limit_req_zone  $binary_remote_addr  zone=gulag:1m   rate=60r/m;

     ## Log Format
        log_format  main  '$remote_addr $host $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" $ssl_cipher $request_time';

     ## Server (www.)melton.li
     server {
        add_header  Cache-Control "public";
        add_header  X-Frame-Options "DENY";
        access_log  /var/log/nginx/access.log main buffer=32k;
        error_log   /var/log/nginx/error.log error;
        expires     max;
        limit_req   zone=gulag burst=200 nodelay;
        listen      *:80;
        listen      [::]:80;
        root        /srv/http/;
        server_name melton.li www.melton.li;
        index index.html;
	
        ## Favicon file
        location = /favicon.ico {
                return 204;
        }
        ## Projects
        location = /projects/ {
                autoindex on;
        }
        ## Static Files
        location = /static/ {
                autoindex on;
        }

        ## default location
        location  / {
                try_files $uri $uri/ $uri/index.html =404; 
        }
        ## All other errors get the generic error page
        error_page 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 495 496 497 500 501 502 503 504 505 506 507 /error_page.html;
        location  /error_page.html { internal; }
     }

     ## Server (www.)uncurlhalo.in
     server {
        add_header  Cache-Control "public";
        add_header  X-Frame-Options "DENY";
        access_log  /var/log/nginx/access.log main buffer=32k;
        error_log   /var/log/nginx/error.log error;
        expires     max;
        limit_req   zone=gulag burst=200 nodelay;
        listen      *:80;
        listen      [::]:80;
        root        /srv/http/;
        server_name uncurlhalo.in www.uncurlhalo.in;
        index index.html;

        ## Favicon file
        location = /favicon.ico {
                return 204;
        }
        ## Projects
        location = /projects/ {
                autoindex on;
        } 

        ## default location
        location  / {
                try_files $uri $uri/ $uri/index.html =404;
        }
        ## All other errors get the generic error page
        error_page 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 495 496 497 500 501 502 503 504 505 506 507 /error_page.html;
        location  /error_page.html { internal; }
     }

     ## Server Stats landing
     server {
        listen      62.210.74.201:80;
        listen      [::]:80;
        server_name stats.melton.li stats.uncurlhalo.in;
        root /srv/http/stats;
        index index.html;
     }

     ## Server Smokeping
     server {
        listen      62.210.74.201:80;
        listen      [::]:80;
        server_name smokeping.melton.li smokeping.uncurlhalo.in;
        root /srv/http/smokeping;
        index smokeping.fcgi;
        location ~ \.cgi$
        {
             fastcgi_intercept_errors on;
             include fastcgi_params;
             fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
             fastcgi_pass unix:/var/run/fcgiwrap.socket;
        }
     }
}

